{"version":3,"file":"jquery.slidingDeck.min.js","sources":["jquery.slidingDeck.js"],"sourcesContent":["/**\n * jQuery Sliding Deck (https://github.com/jonpontet/jquery-sliding-deck)\n * v0.1.1\n */\n\n/*global define, window, document, jQuery, exports, require */\n\n(function (factory) {\n  \"use strict\";\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object' && typeof require === 'function') {\n    // Browserify\n    factory(require('jquery'), window, document);\n  } else {\n    // Browser globals\n    factory(jQuery, window, document);\n  }\n}(function ($) {\n  'use strict'\n\n  class SlidingDeck {\n    constructor(el, options) {\n      let self = this;\n\n      this.element = el;\n      this.$el = $(el).addClass('jsd');\n      this.options = $.extend({}, SlidingDeck.defaults, options);\n      this.$cards = [];\n      this.$cards = this.$el.find(this.options.cards);\n      this.$ghostCard = $('<div class=\"' + this.options.classes.cardBase + ' ' +\n        this.options.classes.cardGhost + '\">');\n      this.isScrollingDown = true;\n      this.lastScrollTop = 0;\n\n      // Define default height for all cards\n      this.cardsHeight = $(window).height();\n      if (this.options.height !== 'full') {\n        if (this.options.height === 'auto') {\n          this.cardsHeight = '';\n        } else {\n          this.cardsHeight = parseInt(this.options.height);\n        }\n      }\n\n      // Init positioning of all cards\n      this.$cards.each(function (i, card) {\n        $(card)\n          .addClass(self.options.classes.cardBase)\n          .height(self.cardsHeight)\n          .data('offsetTop', self.getCardTop(i))\n          .css({\n            'top': self.getCardTop(i) + 'px',\n            'zIndex': self.options.zIndexBase * (i + 1)\n          });\n\n        // Add a ghost card that will sit behind the last card\n        // so that cards remain correctly positioned when the last card is active\n        if (self.$cards.length - 1 === i) {\n          self.$ghostCard\n            .height(self.cardsHeight)\n            .css({\n              'top': self.getCardTop(i) + 'px',\n              'zIndex': self.options.zIndexBase * i\n            })\n            .insertAfter(card);\n        }\n      });\n\n      this.positionCards();\n      this.$el.on('resize scroll', function () {\n        self.setScrollDirection();\n        self.positionCards();\n      });\n    }\n\n    getCardTop(i) {\n      return this.cardsHeight * i;\n    }\n\n    /**\n     *\n     * Credit: https://stackoverflow.com/a/31223774/777885\n     */\n    setScrollDirection() {\n      this.isScrollingDown = this.$el.scrollTop() > this.lastScrollTop;\n      this.lastScrollTop = this.$el.scrollTop() <= 0 ? 0 : this.$el.scrollTop();\n    }\n\n    positionCards() {\n      let self = this;\n      this.$cards.each(function (i, card) {\n        let $card = $(card),\n          offsetTop = $card.data('offsetTop'),\n          jsdScrollTop = self.$el.scrollTop(),\n          isLastCard = (self.$cards.length - 1) === i;\n\n\n        if (self.isScrollingDown) {\n\n          if (jsdScrollTop >= offsetTop &&\n            !$card.hasClass(self.options.classes.cardActive) &&\n            !$card.hasClass(self.options.classes.cardPrevious)) {\n            // Activate next card\n\n            // Current active card becomes previous card\n            if (i - 1 >= 0) {\n              $(self.$cards[i - 1])\n                .removeClass(self.options.classes.cardActive)\n                .addClass(self.options.classes.cardPrevious);\n            }\n\n            // Make this card active\n            $card\n              .addClass([self.options.classes.cardFixed, self.options.classes.cardActive])\n              .removeClass([self.options.classes.cardPrevious, self.options.classes.cardNext])\n              .css('top', '')\n              .css('zIndex', -1);\n\n            // Show the ghost card if this is the last card\n            if (isLastCard) {\n              self.$ghostCard.show();\n            }\n\n            // Set the next card\n            if (self.$cards.length > i + 1) {\n              $(self.$cards[i + 1]).addClass(self.options.classes.cardNext);\n            }\n          }\n        } else {\n          // Scroll up\n\n          if (jsdScrollTop < offsetTop &&\n            $card.hasClass(self.options.classes.cardActive)) {\n            // Deactivate the current active card\n\n            // Remove current next card\n            $(self.$cards)\n              .filter('.' + self.options.classes.cardNext)\n              .removeClass(self.options.classes.cardNext);\n\n            // Make this card inactive and next\n            $card\n              .addClass(self.options.classes.cardNext)\n              .removeClass([self.options.classes.cardFixed, self.options.classes.cardActive])\n              .css('top', $card.data('offsetTop') + 'px')\n              .css('zIndex', '');\n\n            // Set next active card\n            if (i - 1 >= 0) {\n              $(self.$cards[i - 1])\n                .removeClass(self.options.classes.cardPrevious)\n                .addClass(self.options.classes.cardActive);\n            }\n\n            // Hide the ghost card\n            if (isLastCard) {\n              self.$ghostCard.hide();\n            }\n          }\n        }\n      });\n    }\n  }\n\n  $.SlidingDeck = SlidingDeck;\n\n  SlidingDeck.defaults = {\n    cards: 'section',\n    height: 'full',\n    zIndexBase: 10,\n    classes: {\n      cardBase: 'jsd-card',\n      cardActive: 'jsd-card--active',\n      cardFixed: 'jsd-card--fixed',\n      cardPrevious: 'jsd-card--previous',\n      cardNext: 'jsd-card--next',\n      cardGhost: 'jsd-card--ghost',\n    }\n  };\n\n  $.fn.slidingDeck = function (options) {\n    let dataKey = 'slidingDeck',\n      instance = $(this).data(dataKey);\n    // If instance already exists, destroy it\n    if (instance && instance.dispose) {\n      instance.dispose();\n    }\n    instance = new SlidingDeck(this, options);\n    $(this).data(dataKey, instance);\n\n    return this;\n  };\n}));"],"names":["factory","define","amd","exports","require","window","document","jQuery","$","SlidingDeck","constructor","el","options","self","this","element","$el","addClass","extend","defaults","$cards","find","cards","$ghostCard","classes","cardBase","cardGhost","isScrollingDown","lastScrollTop","cardsHeight","height","parseInt","each","i","card","data","getCardTop","css","top","zIndex","zIndexBase","length","insertAfter","positionCards","on","setScrollDirection","scrollTop","$card","offsetTop","jsdScrollTop","isLastCard","hasClass","cardActive","cardPrevious","removeClass","cardFixed","cardNext","show","filter","hide","fn","slidingDeck","dataKey","instance","dispose"],"mappings":"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"}